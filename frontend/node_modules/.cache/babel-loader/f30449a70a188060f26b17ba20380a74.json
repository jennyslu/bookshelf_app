{"ast":null,"code":"var _jsxFileName = \"/Users/jlu/Documents/other/udacity/full-stack/intro-api/frontend/src/App.js\";\nimport React, { Component } from 'react'; // came from node_modules\n\nimport $ from 'jquery';\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport Book from './components/Book';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.getBooks = () => {\n      // perform asynch HTTP (AJAX) request\n      $.ajax({\n        url: \"/books?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        // function to be called if request succeeds\n        success: result => {\n          // sets state of App\n          this.setState({\n            totalBooks: result.total_books,\n            books: result.books\n          });\n          return;\n        },\n        // function to be called if request fails\n        error: error => {\n          alert('Unable to load books. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.deleteBook = id => {\n      if (window.confirm('Are you sure you want to delete the book?')) {\n        $.ajax({\n          url: \"/books/\".concat(id),\n          //TODO: update request URL\n          type: \"DELETE\",\n          success: result => {\n            this.getBooks();\n          },\n          error: error => {\n            alert('Unable to delete the book.');\n            return;\n          }\n        });\n      }\n    };\n\n    this.changeRating = (id, rating) => {\n      let books = [...this.state.books];\n      let targetBook = books.find(book => book.id === id);\n      $.ajax({\n        url: \"/books/\".concat(id),\n        //TODO: update request URL\n        type: \"PATCH\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          'rating': rating\n        }),\n        success: result => {\n          targetBook.rating = rating;\n          this.setState({\n            books\n          });\n        },\n        error: error => {\n          alert('Unable to update the rating.');\n          return;\n        }\n      });\n    };\n\n    this.searchBooks = search => {\n      $.ajax({\n        url: '/books',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          search: search\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            totalBooks: result.total_books,\n            books: result.books,\n            page: 1\n          });\n          document.getElementById(\"search-form\").reset();\n          return;\n        },\n        error: error => {\n          alert('Unable to complete search. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.state = {\n      page: 1,\n      totalBooks: 0,\n      books: []\n    };\n  }\n\n  // React will call this when the initial App object is rendered and inserted into DOM\n  componentDidMount() {\n    this.getBooks();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getBooks());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalBooks / 8);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"div\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  } // how React will know what to show\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"main-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bookshelf-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, this.state.books.map(book => // map() method creates a new array populated with the results of\n    // calling a provided function on every element in the calling array\n    React.createElement(Book, Object.assign({\n      key: book.id,\n      deleteBook: this.deleteBook,\n      changeRating: this.changeRating // recall that ... is rest parameter allowing us to represent\n      // an indefinite number of arguments as an array\n      // similar to exploding a dict?? - like **kwargs\n\n    }, book, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.createPagination())), React.createElement(FormView, {\n      searchBooks: this.searchBooks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jlu/Documents/other/udacity/full-stack/intro-api/frontend/src/App.js"],"names":["React","Component","$","FormView","Book","App","constructor","props","getBooks","ajax","url","state","page","type","success","result","setState","totalBooks","total_books","books","error","alert","deleteBook","id","window","confirm","changeRating","rating","targetBook","find","book","dataType","contentType","data","JSON","stringify","searchBooks","search","xhrFields","withCredentials","crossDomain","document","getElementById","reset","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// came from node_modules\nimport $ from 'jquery';\n\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport Book from './components/Book';\n\n\nclass App extends Component {\n  constructor (props) {\n    super();\n    this.state = {\n      page: 1,\n      totalBooks: 0,\n      books: []\n    }\n  }\n\n  getBooks = () => {\n    // perform asynch HTTP (AJAX) request\n    $.ajax({\n      url: `/books?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      // function to be called if request succeeds\n      success: (result) => {\n        // sets state of App\n        this.setState({\n          totalBooks: result.total_books,\n          books: result.books\n        })\n        return;\n      },\n      // function to be called if request fails\n      error: (error) => {\n        alert('Unable to load books. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  deleteBook = (id) => {\n    if (window.confirm('Are you sure you want to delete the book?')) {\n      $.ajax({\n        url: `/books/${id}`, //TODO: update request URL\n        type: \"DELETE\",\n        success: (result) => {\n          this.getBooks();\n        },\n        error: (error) => {\n          alert('Unable to delete the book.')\n          return;\n        }\n      })\n    }\n  }\n\n  changeRating = (id, rating) => {\n    let books = [...this.state.books]\n    let targetBook = books.find((book) => book.id === id);\n\n    $.ajax({\n      url: `/books/${id}`, //TODO: update request URL\n      type: \"PATCH\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({ 'rating': rating }),\n      success: (result) => {\n        targetBook.rating = rating\n        this.setState({ books })\n      },\n      error: (error) => {\n        alert('Unable to update the rating.')\n        return;\n      }\n    })\n  }\n\n  searchBooks = (search) => {\n    $.ajax({\n      url: '/books', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({ search: search }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          totalBooks: result.total_books,\n          books: result.books,\n          page: 1\n        })\n        document.getElementById(\"search-form\").reset();\n        return;\n      },\n      error: (error) => {\n        alert('Unable to complete search. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  // React will call this when the initial App object is rendered and inserted into DOM\n  componentDidMount () {\n    this.getBooks()\n  }\n\n  selectPage (num) {\n    this.setState({ page: num }, () => this.getBooks());\n  }\n\n  createPagination () {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalBooks / 8)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <div\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => { this.selectPage(i) }}>{i}\n        </div>)\n    }\n    return pageNumbers;\n  }\n\n  // how React will know what to show\n  render () {\n    return (\n      <div className=\"App\">\n        <div id=\"main-view\">\n          <div className=\"bookshelf-container\">\n            {this.state.books.map((book) => (\n              // map() method creates a new array populated with the results of\n              // calling a provided function on every element in the calling array\n              <Book\n                key={book.id}\n                deleteBook={this.deleteBook}\n                changeRating={this.changeRating}\n                // recall that ... is rest parameter allowing us to represent\n                // an indefinite number of arguments as an array\n                // similar to exploding a dict?? - like **kwargs\n                {...book}\n              />\n            ))}\n          </div>\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n        <FormView searchBooks={this.searchBooks} />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}